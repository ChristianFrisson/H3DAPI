/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
static yyconst short int yy_accept[308] =
    {   0,
        0,    0,   61,   59,   58,   58,   55,   59,   59,   55,
       57,   57,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   58,
       55,    0,   56,   57,    0,   55,   57,   55,   55,   57,
       57,    0,    1,   55,   55,   55,   55,   55,   24,   55,
       55,   55,   55,   55,   55,   23,   55,   55,   55,   55,
       55,   55,   55,   57,   57,   57,   55,   57,   55,    9,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   10,

       55,   55,   55,   55,   55,   55,   55,   57,   57,   55,
       55,   55,   55,   55,    8,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   12,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,    2,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   57,   57,   57,   55,   55,   55,    3,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   11,   22,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   18,   55,   55,   55,
       55,   55,   55,   55,    6,   55,    7,   25,   55,   55,

       55,   55,   55,   32,   55,   55,   35,   55,   55,   55,
       40,   55,   55,   55,   55,   55,   47,   55,   55,   50,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       26,   55,   29,   30,   31,   55,   55,   36,   37,   38,
       39,    4,   41,   55,   44,   45,   46,   55,   55,   51,
       52,   53,   54,   14,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   28,   55,   34,   55,   43,   55,   49,
       16,   55,   55,   55,   55,   55,    5,   55,   55,   55,
       55,   55,   55,   55,   13,   55,   55,   55,   55,   33,
       55,   48,   55,   55,   55,   15,   21,   27,   42,   55,

       55,   19,   20,   55,   55,   17,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    4,    4,    4,    1,    4,
        4,    4,    7,    2,    7,    8,    4,    9,   10,   11,
       12,   10,   10,   10,   10,   10,   10,    4,    4,    4,
        4,    4,    4,    4,   13,   14,   15,   16,   17,   18,
       19,    4,   20,    4,    4,   21,   22,   23,   24,   25,
        4,   26,   27,   28,   29,   30,    4,   31,    4,    4,
        1,    1,    1,    4,    4,    4,   32,   33,   34,   35,

       36,   37,   38,    4,   39,    4,    4,   40,   41,   42,
       43,   44,    4,   45,   46,   47,   48,   49,    4,   50,
       51,   52,    1,    4,    1,    4,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    2,    3,    4,    1,    3,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    5,    5,    5,    5,    5,    5,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static yyconst short int yy_base[312] =
    {   0,
        0,    0,  427,  428,   51,   53,    0,    0,    0,   55,
       90,   28,  399,  401,  407,  392,  409,   46,   52,  392,
      394,  395,  400,   50,  390,   30,  377,  373,  366,   79,
        0,  408,    0,  139,    0,    0,   40,   44,    0,   46,
        0,    0,    0,  390,  393,   58,  389,  384,    0,  380,
      138,  386,  382,  376,  155,    0,  375,  386,  366,  357,
      364,   45,  352,    0,   54,    0,  177,  213,  373,    0,
      373,  379,  368,  370,  380,  349,  348,  347,  349,   46,
      345,  344,  339,  346,  348,  362,   85,  354,  338,  337,
      336,  338,   64,  334,  333,  328,  335,  337,  355,    0,

      329,  327,  329,  321,  319,  322,  224,  230,   77,  341,
      338,  337,  345,  335,    0,  317,  319,  310,  314,  324,
      308,  319,  306,  307,  310,  316,    0,  329,  324,  330,
      303,  305,  296,  300,  307,  289,  296,  281,  282,  285,
      291,    0,  277,  277,  287,  282,  273,  271,    0,  279,
       78,    0,   79,   80,  295,  289,  293,    0,  286,  273,
      269,  278,  277,  270,  295,  270,  273,  265,  267,  103,
      281,    0,    0,  261,  257,  266,  266,  259,  283,  258,
      261,  253,  249,  105,   98,  247,    0,  247,  254,  230,
        0,   81,   88,  259,    0,  250,    0,    0,  229,  233,

      225,  235,  259,    0,  222,  226,    0,   88,   97,  250,
        0,  220,  224,  216,  226,  249,    0,  212,  216,    0,
       98,  102,  215,  208,  220,  214,  115,  229,  229,  225,
      224,  213,    0,    0,    0,  209,  208,    0,    0,    0,
        0,    0,  219,  208,    0,    0,    0,  204,  194,    0,
        0,    0,    0,    0,  183,  210,  182,  179,  170,  166,
      179,  182,  186,    0,  161,    0,  184,    0,  159,    0,
        0,  162,  148,  148,  154,  157,    0,  168,  170,  138,
      165,  135,  140,  138,    0,  124,  116,  138,  147,    0,
      146,    0,  115,  123,   98,    0,    0,    0,    0,  108,

       94,    0,    0,   84,   69,    0,  428,  327,  332,  337,
       56
    } ;

static yyconst short int yy_def[312] =
    {   0,
      307,    1,  307,  307,  307,  307,  308,  309,  310,  308,
      307,   11,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  307,
      308,  309,  310,  307,  309,   10,   11,   10,   10,   11,
       11,  311,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,   34,   11,   11,  308,  311,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,   67,   68,  108,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,   10,   67,
      150,  108,  108,  108,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      150,  150,  150,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,    0,  307,  307,  307,
      307
    } ;

static yyconst short int yy_nxt[481] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,   12,
       12,   12,   13,    7,   14,   15,   16,   17,    7,   18,
        7,   19,   20,    7,   21,   22,   23,   24,   25,    7,
        7,    7,    7,    7,    7,   26,   27,    7,   28,    7,
        7,    7,   29,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   30,   30,   30,   30,   34,   34,  307,   35,
       68,   36,   37,   38,   36,   36,   36,   48,   50,   51,
      307,   39,   49,   56,   67,   57,  307,  307,   59,   60,
       30,   30,   71,  104,  307,   72,  120,  121,  105,  307,
       39,   34,   34,   67,   35,  307,   40,   37,   41,   40,

       40,   40,  128,  307,  135,  136,   37,  307,   31,  307,
      307,   31,  129,  208,  209,  221,  222,  223,   31,  306,
       42,  224,  238,  305,  239,   37,  307,   31,  307,  307,
       31,  240,  250,  241,  251,  304,  252,   31,  253,   42,
       34,   34,  303,   35,  302,   65,  301,   66,   65,   65,
       65,   76,   77,   78,  300,   79,  258,   80,  299,  298,
       81,  297,  259,   82,   83,   84,  296,   85,   89,   90,
       91,  295,   92,  294,   93,  293,  292,   94,  291,  290,
       95,   96,   97,  289,   98,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  288,  287,  286,  285,  284,

      283,  282,  281,  280,  279,  278,  277,  276,  107,  107,
      107,  107,  107,  107,   34,   34,  275,   35,  274,   65,
      273,  108,  109,  109,  109,   34,   34,  272,   35,  271,
      149,  270,  150,  151,  151,  151,   40,   37,  152,  153,
      153,  153,  269,  268,  267,  266,  154,  265,  264,  263,
      262,  261,  260,  257,  256,  255,  254,  249,  248,  247,
       42,  246,  245,  244,  243,  154,  242,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,   42,
       34,   34,  225,   35,  220,   36,   37,  191,  192,  192,
      192,  219,  218,  217,  216,  193,  215,  214,  213,  212,

      211,  210,  207,  206,  205,  204,  203,  202,  201,   67,
      200,  199,  198,  197,  193,  196,  195,  194,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,   67,   31,
      180,   31,   32,   32,   32,  179,   32,   33,  178,   33,
       33,   33,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  148,  147,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  134,  133,  132,
      131,  130,  127,  126,  125,  124,  123,  122,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  106,  103,

      102,  101,  100,   99,   88,   87,   86,   75,   74,   73,
       70,   69,   64,   63,   62,   61,   58,   55,   54,   53,
       52,   47,   46,   45,   44,   43,  307,    3,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307
    } ;

static yyconst short int yy_chk[481] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,   10,   10,   12,   10,
      311,   10,   10,   10,   10,   10,   10,   18,   19,   19,
       37,   10,   18,   24,   38,   24,   40,   12,   26,   26,
       30,   30,   46,   62,   65,   46,   80,   80,   62,   37,
       10,   11,   11,   38,   11,   40,   11,   11,   11,   11,

       11,   11,   87,   65,   93,   93,   11,  109,  151,  153,
      154,  192,   87,  170,  170,  184,  184,  185,  193,  305,
       11,  185,  208,  304,  208,   11,  109,  151,  153,  154,
      192,  209,  221,  209,  221,  301,  222,  193,  222,   11,
       34,   34,  300,   34,  295,   34,  294,   34,   34,   34,
       34,   51,   51,   51,  293,   51,  227,   51,  291,  289,
       51,  288,  227,   51,   51,   51,  287,   51,   55,   55,
       55,  286,   55,  284,   55,  283,  282,   55,  281,  280,
       55,   55,   55,  279,   55,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,  278,  276,  275,  274,  273,

      272,  269,  267,  265,  263,  262,  261,  260,   67,   67,
       67,   67,   67,   67,   68,   68,  259,   68,  258,   68,
      257,   68,   68,   68,   68,  107,  107,  256,  107,  255,
      107,  249,  107,  107,  107,  107,  108,  108,  108,  108,
      108,  108,  248,  244,  243,  237,  108,  236,  232,  231,
      230,  229,  228,  226,  225,  224,  223,  219,  218,  216,
      108,  215,  214,  213,  212,  108,  210,  206,  205,  203,
      202,  201,  200,  199,  196,  194,  190,  189,  188,  108,
      150,  150,  186,  150,  183,  150,  150,  150,  150,  150,
      150,  182,  181,  180,  179,  150,  178,  177,  176,  175,

      174,  171,  169,  168,  167,  166,  165,  164,  163,  150,
      162,  161,  160,  159,  150,  157,  156,  155,  148,  147,
      146,  145,  144,  143,  141,  140,  139,  138,  150,  308,
      137,  308,  309,  309,  309,  136,  309,  310,  135,  310,
      310,  310,  134,  133,  132,  131,  130,  129,  128,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      114,  113,  112,  111,  110,  106,  105,  104,  103,  102,
      101,   99,   98,   97,   96,   95,   94,   92,   91,   90,
       89,   88,   86,   85,   84,   83,   82,   81,   79,   78,
       77,   76,   75,   74,   73,   72,   71,   69,   63,   61,

       60,   59,   58,   57,   54,   53,   52,   50,   48,   47,
       45,   44,   32,   29,   28,   27,   25,   23,   22,   21,
       20,   17,   16,   15,   14,   13,    3,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "vrml.l"
#define INITIAL 0
#line 534 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 16 "vrml.l"



#include "vrml.hpp"
void setyylval(char *);
void addLine( const char* );


#line 670 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 308 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 428 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 24 "vrml.l"
return AS;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 25 "vrml.l"
return TRUE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 26 "vrml.l"
return FALSE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 27 "vrml.l"
return PROFILE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 28 "vrml.l"
return COMPONENT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 29 "vrml.l"
return EXPORT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 30 "vrml.l"
return IMPORT;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 31 "vrml.l"
return META;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 32 "vrml.l"
return DEF;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 33 "vrml.l"
return USE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 34 "vrml.l"
return PROTO;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 35 "vrml.l"
return VRMLNULL;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 36 "vrml.l"
return inputOnly;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 37 "vrml.l"
return inputOnly;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 38 "vrml.l"
return outputOnly;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 39 "vrml.l"
return outputOnly;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 40 "vrml.l"
return initializeOnly;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 41 "vrml.l"
return initializeOnly;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 42 "vrml.l"
return inputOutput;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 43 "vrml.l"
return inputOutput;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 44 "vrml.l"
return EXTERNPROTO;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 45 "vrml.l"
return ROUTE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 46 "vrml.l"
return TO;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 47 "vrml.l"
return IS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 48 "vrml.l"
return TMFBool;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 49 "vrml.l"
return TMFColor;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 50 "vrml.l"
return TMFColorRGBA;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 "vrml.l"
return TMFDouble;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 "vrml.l"
return TMFFloat;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 "vrml.l"
return TMFImage;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 "vrml.l"
return TMFInt32;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 "vrml.l"
return TMFNode;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 "vrml.l"
return TMFRotation;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 "vrml.l"
return TMFString;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 "vrml.l"
return TMFTime;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 59 "vrml.l"
return TMFVec2d;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 "vrml.l"
return TMFVec2f;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 61 "vrml.l"
return TMFVec3d;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 62 "vrml.l"
return TMFVec3f;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 63 "vrml.l"
return TSFBool;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 64 "vrml.l"
return TSFColor;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 65 "vrml.l"
return TSFColorRGBA;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 66 "vrml.l"
return TSFDouble;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 67 "vrml.l"
return TSFFloat;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 68 "vrml.l"
return TSFImage;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 69 "vrml.l"
return TSFInt32;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 70 "vrml.l"
return TSFNode;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 71 "vrml.l"
return TSFRotation;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 72 "vrml.l"
return TSFString;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 73 "vrml.l"
return TSFTime;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 74 "vrml.l"
return TSFVec2d;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 75 "vrml.l"
return TSFVec2f;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 76 "vrml.l"
return TSFVec2d;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 77 "vrml.l"
return TSFVec3f;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 80 "vrml.l"
/*printf("ID=%s\n",yytext);*/ addLine( yytext ); setyylval(yytext); return ID;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "vrml.l"
addLine( yytext ); /* eat up comments */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 85 "vrml.l"
addLine( yytext ); /*printf("VAL=%s\n",yytext);*/ setyylval(yytext); return STRING;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "vrml.l"
addLine( yytext );  /* eat up whitespace */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 89 "vrml.l"
addLine( yytext ); return yytext[0];
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 93 "vrml.l"
ECHO;
	YY_BREAK
#line 1053 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 308 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 308 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 307);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 93 "vrml.l"



