PROJECT (H3DAPI)

# include HAPI in the build
# Should this part only be done for Windows? It is used to avoid placing everything directly in "build" catalogue if some other catalogue is chosen.
STRING( REPLACE ${H3DAPI_SOURCE_DIR} ${H3DAPI_SOURCE_DIR}/../../HAPI/build BINARY_DIR_FOR_HAPI ${CMAKE_CURRENT_BINARY_DIR} )
ADD_SUBDIRECTORY( ${H3DAPI_SOURCE_DIR}/../../HAPI/build
                  ${BINARY_DIR_FOR_HAPI} )


SET( H3DAPI_MAJOR_VERSION 2 )
SET( H3DAPI_MINOR_VERSION 0 )
SET( H3DAPI_BUILD_VERSION 0 )

#SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "H3DAPI. A cross platform, device independent, graphics and haptics scenegraph.")
#SET(CPACK_PACKAGE_VENDOR "SenseGraphics AB")
#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${H3DAPI_SOURCE_DIR}/../ReadMe.txt")
#SET(CPACK_RESOURCE_FILE_LICENSE "${H3DAPI_SOURCE_DIR}/../LICENSE")

#SET(CPACK_PACKAGE_VERSION_MAJOR ${H3DAPI_MAJOR_VERSION})
#SET(CPACK_PACKAGE_VERSION_MINOR ${H3DAPI_MINOR_VERSION})
#SET(CPACK_PACKAGE_VERSION_PATCH ${H3DAPI_BUILD_VERSION})
# TODO: fix different for windows and unix if needed.
#IF(WIN32 AND NOT UNIX)
#  SET(CPACK_IGNORE_FILES /\\\\.svn/
#                         \\\\.obj$
#                         \\\\.vcproj$
#                         \\\\.ncb$
#                         \\\\.log$
#                         \\\\.suo$
#                         \\\\.sln$
#                         \\\\.zip$
#                         \\\\.dir/
#                         \\\\.user$
#                         \\\\.cv$
#                         /Debug
#                         /debug
#                         /Release
#                         /release
#                         /linux
#                         /win32
#                         /osx )
#  SET(CPACK_INSTALLED_DIRECTORIES "${H3DAPI_SOURCE_DIR}/../../H3DAPI;H3DAPI"
#                                  "${H3DAPI_SOURCE_DIR}/../../HAPI;HAPI"
#                                  "${H3DAPI_SOURCE_DIR}/../../H3DUtil;H3DUtil" )
#  MESSAGE( STATUS ${CPACK_INSTALL_COMMANDS})
#ENDIF(WIN32 AND NOT UNIX)
#INCLUDE(CPack)

SET( H3DAPI_FULL_VERSION
${H3DAPI_MAJOR_VERSION}.${H3DAPI_MINOR_VERSION}.${H3DAPI_BUILD_VERSION} ) 

#add all sources
AUX_SOURCE_DIRECTORY(../src H3DAPI_SRCS)

# add the H3DAPI.rc resource file if Visual Studio
IF(MSVC)
  SET( H3DAPI_SRCS ${H3DAPI_SRCS} ${H3DAPI_SOURCE_DIR}/H3DAPI.rc )
ENDIF(MSVC)

# add all optional libraries to this variable
SET(optionalLibs)

# add all required libraries to this variable
SET(requiredLibs)

IF(NOT WIN32)
SET(requiredLibs ${requiredLibs} H3DUtil HAPI)
ENDIF(NOT WIN32)

INCLUDE_DIRECTORIES( ../include
${H3DAPI_SOURCE_DIR}/../../H3DUtil/include
${H3DAPI_SOURCE_DIR}/../../HAPI/include 
${H3DAPI_SOURCE_DIR}/../../HAPI/OpenHapticsRenderer/include
${H3DAPI_SOURCE_DIR}/../../HAPI/Chai3DRenderer/include)

IF(WIN32)
  SET(requiredLibs ${requiredLibs} winmm.lib )
ENDIF(WIN32)

SET(CMAKE_MODULE_PATH ${H3DAPI_SOURCE_DIR}/modules )

FIND_PACKAGE(PTHREAD REQUIRED)
IF(PTHREAD_FOUND)
  INCLUDE_DIRECTORIES( ${PTHREAD_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${PTHREAD_LIBRARIES})
  ELSE(WIN32)
    SET(requiredLibs ${requiredLibs} ${PTHREAD_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(PTHREAD_FOUND)

FIND_PACKAGE(OpenGL REQUIRED)
IF(OPENGL_FOUND)
  SET(HAVE_OPENGL 1)
  INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} )
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${OPENGL_LIBRARIES} )
  ELSE(WIN32)
    SET(requiredLibs ${requiredLibs} ${OPENGL_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(OPENGL_FOUND)

FIND_PACKAGE(GLUT)
IF(GLUT_FOUND)
  INCLUDE_DIRECTORIES( ${GLUT_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${GLUT_LIBRARIES} )
  ELSE(WIN32)
    SET(requiredLibs ${requiredLibs} ${GLUT_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(GLUT_FOUND)

FIND_PACKAGE(GLEW REQUIRED)
IF(GLEW_FOUND)
  INCLUDE_DIRECTORIES( ${GLEW_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${GLEW_LIBRARIES} )
  ELSE(WIN32)
    SET(requiredLibs ${requiredLibs} ${GLEW_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(GLEW_FOUND)

FIND_PACKAGE(Xerces)
IF(XERCES_FOUND)
  SET(HAVE_XERCES 1)
  INCLUDE_DIRECTORIES( ${XERCES_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${XERCES_LIBRARIES} )
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${XERCES_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(XERCES_FOUND)

FIND_PACKAGE(H3DCURL)
IF(CURL_FOUND)
  SET(HAVE_LIBCURL 1)
  INCLUDE_DIRECTORIES( ${CURL_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${CURL_LIBRARIES} )
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${CURL_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(CURL_FOUND)

FIND_PACKAGE(NvidiaCG)
IF(NVIDIACG_FOUND)
  SET(HAVE_CG 1)
  INCLUDE_DIRECTORIES( ${NVIDIACG_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${NVIDIACG_LIBRARIES} )
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${NVIDIACG_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(NVIDIACG_FOUND)

FIND_PACKAGE(H3DZLIB)
IF(ZLIB_FOUND)
  SET(HAVE_ZLIB 1)
  INCLUDE_DIRECTORIES( ${ZLIB_INCLUDE_DIR} )
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${ZLIB_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${ZLIB_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(ZLIB_FOUND)

FIND_PACKAGE(PythonLibs)
IF( PYTHON_INCLUDE_PATH AND PYTHON_LIBRARIES)
  SET(PYTHON_FOUND 1)
ELSE(PYTHON_INCLUDE_PATH AND PYTHON_LIBRARIES)
  SET(PYTHON_FOUND 0)
ENDIF(PYTHON_INCLUDE_PATH AND PYTHON_LIBRARIES)

# Report the results.
IF(NOT PYTHON_FOUND)
  SET(PYTHON_DIR_MESSAGE
    "PYTHON was not found. Make sure PYTHON_LIBRARY and PYTHON_INCLUDE_PATH are set.")
  IF(NOT PYTHON_FIND_QUIETLY)
    MESSAGE(STATUS "${PYTHON_DIR_MESSAGE}")
  ELSE(NOT PYTHON_FIND_QUIETLY)
    IF(PYTHON_FIND_REQUIRED) 
      MESSAGE(FATAL_ERROR "${PYTHON_DIR_MESSAGE}")
    ENDIF(PYTHON_FIND_REQUIRED)
  ENDIF(NOT PYTHON_FIND_QUIETLY)
ENDIF(NOT PYTHON_FOUND)

IF(PYTHON_FOUND)
  SET(HAVE_PYTHON 1)
  INCLUDE_DIRECTORIES( ${PYTHON_INCLUDE_PATH} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${PYTHON_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${PYTHON_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(PYTHON_FOUND)

FIND_PACKAGE(H3DOpenAL)
IF(OPENAL_FOUND)
  SET(HAVE_OPENAL 1)
  INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR} )
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${OPENAL_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${OPENAL_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(OPENAL_FOUND)

FIND_PACKAGE(Vorbis)
IF(VORBIS_FOUND)
  SET(HAVE_LIBVORBIS 1)
  INCLUDE_DIRECTORIES( ${VORBIS_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${VORBIS_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${VORBIS_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(VORBIS_FOUND)

FIND_PACKAGE(Audiofile)
IF(AUDIOFILE_FOUND)
  SET(HAVE_LIBAUDIOFILE 1)
  INCLUDE_DIRECTORIES( ${AUDIOFILE_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${AUDIOFILE_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${AUDIOFILE_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(AUDIOFILE_FOUND)

FIND_PACKAGE(FreeType)
IF(FREETYPE_FOUND)
  SET(HAVE_FREETYPE 1)
  INCLUDE_DIRECTORIES( ${FREETYPE_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${FREETYPE_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${FREETYPE_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(FREETYPE_FOUND)

FIND_PACKAGE(3DXWARE)
IF(3DXWARE_FOUND)
  SET(HAVE_3DXWARE 1)
  INCLUDE_DIRECTORIES( ${3DXWARE_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${3DXWARE_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${3DXWARE_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(3DXWARE_FOUND)

FIND_PACKAGE(FTGL)
IF(FTGL_FOUND)
  SET(HAVE_FTGL 1)
  INCLUDE_DIRECTORIES( ${FTGL_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${FTGL_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${FTGL_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(FTGL_FOUND)

FIND_PACKAGE(FreeImage)
IF(FREEIMAGE_FOUND)
  SET(HAVE_FREEIMAGE 1)
  INCLUDE_DIRECTORIES( ${FREEIMAGE_INCLUDE_DIR} ) 
  IF(WIN32)
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${FREEIMAGE_LIBRARIES})
  ELSE(WIN32)
    SET(optionalLibs ${optionalLibs} ${FREEIMAGE_LIBRARIES} )
  ENDIF(WIN32)
ENDIF(FREEIMAGE_FOUND)

IF(WIN32)
  FIND_PACKAGE(DirectShow)
  IF(DIRECTSHOW_FOUND)
    SET(HAVE_DSHOW 1)
    INCLUDE_DIRECTORIES( ${DIRECTSHOW_INCLUDE_DIR} ) 
    STRIP_AND_ADD_LIBRARY_DIRECTORIES( ${DIRECTSHOW_LIBRARIES})
  ENDIF(DIRECTSHOW_FOUND)
ENDIF(WIN32)

# H3DAPI shared library definition
ADD_LIBRARY(H3DAPI SHARED ${H3DAPI_SRCS})

# make sure that the H3DAPI.rc contains the correct svn-version
IF( MSVC )
  EXECUTE_PROCESS( COMMAND ${H3DAPI_SOURCE_DIR}/FindSVNVersion ${H3DAPI_SOURCE_DIR}/../src/.svn/entries 
                   OUTPUT_VARIABLE H3DAPI_SVN_VERSION )
  # autogenerate H3DAPI.rc depending on the version
  CONFIGURE_FILE( H3DAPI.rc.cmake ${H3DAPI_SOURCE_DIR}/H3DAPI.rc )
  
  ADD_CUSTOM_COMMAND( TARGET H3DAPI 
                      PRE_BUILD 
                      COMMAND ${H3DAPI_SOURCE_DIR}/UpdateResourceFile 
                      ARGS H3DAPI ${H3DAPI_SOURCE_DIR}/H3DAPI.rc H3DAPI.rc.cmake
                      ${H3DAPI_MAJOR_VERSION} ${H3DAPI_MINOR_VERSION}
                      ${H3DAPI_BUILD_VERSION}
                      ${H3DAPI_SOURCE_DIR}/../src/.svn/entries )
ENDIF(MSVC)

# set the install directory to the H3D directory on Windows
IF(WIN32) 
 SET( CMAKE_INSTALL_PREFIX ${H3DAPI_SOURCE_DIR}/../..)
ENDIF(WIN32)

IF(NOT WIN32 AND NOT APPLE)
  FIND_PACKAGE(FontConfig)
  IF(FONTCONFIG_FOUND)
    SET(HAVE_FONTCONFIG 1)
    INCLUDE_DIRECTORIES( ${FONTCONFIG_INCLUDE_DIR} ) 
    SET(optionalLibs ${optionalLibs} ${FONTCONFIG_LIBRARIES} )
  ENDIF(FONTCONFIG_FOUND)
ENDIF(NOT WIN32 AND NOT APPLE) 

# make sure symbols are exported.
SET_TARGET_PROPERTIES( H3DAPI PROPERTIES COMPILE_FLAGS "-DH3DAPI_EXPORTS" )

# add the libraries needed for linking
TARGET_LINK_LIBRARIES( H3DAPI ${requiredLibs} ${optionalLibs} )

# make the name of debug libraries end in _d.
SET_TARGET_PROPERTIES( H3DAPI PROPERTIES DEBUG_POSTFIX "_d" )

# set the version of the library
SET_TARGET_PROPERTIES( H3DAPI PROPERTIES VERSION ${H3DAPI_FULL_VERSION} )

# change the name depending on compiler to be able to tell them apart
# since they are not compatible with each other. 
IF(MSVC70 OR MSVC71)
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES OUTPUT_NAME H3DAPI_vc7 )
ELSEIF(MSVC80)
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES OUTPUT_NAME H3DAPI_vc8 )
  # remove some warnings about deprecated functions.
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE /Zc:wchar_t-")
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES LINK_FLAGS "/NODEFAULTLIB:msvcrt")
ELSEIF(MSCV90)
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES OUTPUT_NAME H3DAPI_vc9 )
  # remove some warnings about deprecated functions.
  SET_TARGET_PROPERTIES( H3DAPI PROPERTIES COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE" )
ENDIF(MSVC70 OR MSVC71)

# autogenerate H3DAPI.h depending on the libraries available.
CONFIGURE_FILE( ${H3DAPI_SOURCE_DIR}/../include/H3D/H3DApi.cmake ${H3DAPI_SOURCE_DIR}/../include/H3D/H3DApi.h )

INSTALL( TARGETS H3DAPI
         LIBRARY DESTINATION lib
         RUNTIME DESTINATION bin
         ARCHIVE DESTINATION lib )

IF( NOT WIN32 )
  INSTALL( DIRECTORY ../include/H3D 
           DESTINATION /usr/local/include 
           PATTERN .svn EXCLUDE )
ENDIF( NOT WIN32 )

# H3DAPI is dependent on H3DUtil and HAPI
ADD_DEPENDENCIES( H3DAPI H3DUtil )
ADD_DEPENDENCIES( H3DAPI HAPI )

IF( WIN32 )
  ADD_DEPENDENCIES( H3DAPI OpenHapticsRenderer )
  ADD_DEPENDENCIES( H3DAPI Chai3DRenderer )
ENDIF( WIN32 )

GET_DIRECTORY_PROPERTY( HAPI_INCLUDES DIRECTORY ${H3DAPI_SOURCE_DIR}/../../HAPI/build INCLUDE_DIRECTORIES )
INCLUDE_DIRECTORIES( ${HAPI_INCLUDES} )
