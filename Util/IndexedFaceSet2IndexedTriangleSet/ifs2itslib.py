# (c) SenseGraphics 2010. Written for MOOG
# 17.06.2010
# Convert from IndexedFaceSet to IndexedTriangleSet for those IndexedFaceSets
# that are generated by other programs and have only 3-vertex polygons.
# The program will not work if the IndexedFaceSet contains a polygon with more than
# 3 vertices.
# Syntax: h3dload ifs2its.x3d [source_file] [destination_file]
# Demo: h3dload ifs2its.x3d face.x3d face_converted.x3d

from H3DInterface import *

import itertools
import operator
import random

class Pack:
  def __init__(self):
    #self.texs = []  # all the texture (ID) of this coordinate
    self.texpoint = None
    self.next_coord_idx_ptr = -1 # point to the next index that contains point with the same coord as this point
    self.different = 0

def ifs2its(IFS):
  """
    IFS: IndexedFaceSet
    Return: IndexedTriangleSet string
  """
  
  COORD = IFS.coord.getValue()
  TEX_COORD = IFS.texCoord.getValue()

  coord_idxs    = IFS.coordIndex.getValue()
  tex_idxs      = IFS.texCoordIndex.getValue()
  coord_points  = COORD.point.getValue()
  tex_points    = TEX_COORD.point.getValue()

  D = [ Pack() for i in range(len(coord_points)) ]

  group = createX3DNodeFromString("<Group />")[0]

  # remove -1
  coord_idxs = filter(lambda x: x != -1, coord_idxs)
  tex_idxs = filter(lambda x: x != -1, tex_idxs)
  
  # count number of new points (statistics purpose)
  count_newpoints = 0

  for i in range(len(coord_idxs)):
    ci = coord_idxs[i]
    ti = tex_idxs[i]

    if D[ci].texpoint == None: # first time encounter this coord
      D[ci].texpoint = tex_points[ti]
    else:
      tmp_id = ci
      # while the tex is still not the same, try to jump to the next point
      jump = 0
      while (tex_points[ti] - D[tmp_id].texpoint).length() > 0.00001 and D[tmp_id].next_coord_idx_ptr != -1:
        tmp_id = D[tmp_id].next_coord_idx_ptr
        jump += 1

      if (tex_points[ti] - D[tmp_id].texpoint).length() > 0.00001: # different tex_coord
        # create new point with same coordinate
        count_newpoints += 1
        D.append(Pack())
        D[tmp_id].next_coord_idx_ptr = len(D)-1
        D[len(D)-1].texpoint = tex_points[ti]
        coord_points.append(coord_points[ci])
        coord_idxs[i] = len(D)-1
      else:
        if jump > 0: coord_idxs[i] = tmp_id

  count_oldpoints = len(coord_points) - count_newpoints
  print '%i points added. Original: %i points. %f percent extra.' % (count_newpoints, count_oldpoints, count_newpoints * 100 / count_oldpoints)

  ans_tex_points = [None for i in range(len(coord_points))]
  for i in range(len(coord_idxs)):
    ci = coord_idxs[i]
    if ans_tex_points[ci] == None:
      ans_tex_points[ci] = D[ci].texpoint
    
  for i in range(len(ans_tex_points)):
    if not isinstance(ans_tex_points[i], Vec2f):
      ans_tex_points[i] = Vec2f(0.1, 0.5)

  its = createX3DNodeFromString("<IndexedTriangleSet />")[0]
  its.index.setValue(coord_idxs)
  coord_node = createX3DNodeFromString("<Coordinate />")[0]
  coord_node.point.setValue(coord_points)
  texcoord_node = createX3DNodeFromString("<TextureCoordinate />")[0]
  texcoord_node.point.setValue(ans_tex_points)
  its.coord.setValue(coord_node)
  its.texCoord.setValue(texcoord_node)

  return writeNodeAsX3D(its)
