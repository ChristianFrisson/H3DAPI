# (c) SenseGraphics 2010. Written for MOOG
# Convert from IndexedFaceSet to IndexedTriangleSet for those IndexedFaceSets
# that are generated by other programs and have only 3-vertex polygons.
# The program will not work if the IndexedFaceSet contains a polygon with more than
# 3 vertices.
# Syntax: h3dload ifs2its.x3d [source_file] [destination_file]
# Demo: h3dload ifs2its.x3d face.x3d face_converted.x3d

from H3DInterface import *
import re
from ifs2itslib2 import ifs2its
import sys

class Pack:
  def __init__(self):
    self.texs = []
    self.texpoint = Vec2f()

def replacecallback(r):
  print 'Found. Converting...'
  IFS = createX3DNodeFromString("<IndexedFaceSet" + r.group(3) + "</IndexedFaceSet>")[0]
  its = ifs2its(IFS)
  return r'%s%s%s%s%s' % (r.group(1), r.group(2), its, r.group(4), r.group(5))


# Arguments check
if len(sys.argv) < 4:
  print 'Error. Not enough argument.\n'
  print 'Syntax: h3dload ifs2its.x3d [source_file] [destination_file]\n'
  sys.exit()

print 'Opening file %s' % sys.argv[2]
s = open(sys.argv[2], 'r').read()

# match face_deformable.IFS and convert
print 'Looking for face_deformable...'
reg = re.compile(r'(<Transform DEF="face_deformable")(.*?)<IndexedFaceSet(.*?)</IndexedFaceSet>(.*?)(</Transform>)', re.DOTALL)
s = reg.sub(replacecallback, s)

# uncomment if wanting to convert face_static
# match face_static.IFS and convert
print 'Looking for face_static'
reg = re.compile(r'(<Transform DEF="face_static")(.*?)<IndexedFaceSet(.*?)</IndexedFaceSet>(.*?)(</Transform>)', re.DOTALL)
s = reg.sub(replacecallback, s)

# match face_inner_mouth.IFS and convert
print 'Looking for face_inner_mouth'
reg = re.compile(r'(<Transform DEF="face_inner_mouth")(.*?)<IndexedFaceSet(.*?)</IndexedFaceSet>(.*?)(</Transform>)', re.DOTALL)
s = reg.sub(replacecallback, s)


print 'Writing to file %s' % sys.argv[3]
open(sys.argv[3], 'w').write(s)
print 'Done. Exiting...'
sys.exit()
